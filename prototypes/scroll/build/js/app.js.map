{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["(function e(t, n, r) {\n  function s(o, u) {\n    if (!n[o]) {\n      if (!t[o]) {\n        var a = typeof require == \"function\" && require;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error(\"Cannot find module '\" + o + \"'\");throw f.code = \"MODULE_NOT_FOUND\", f;\n      }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {\n        var n = t[o][1][e];return s(n ? n : e);\n      }, l, l.exports, e, t, n, r);\n    }return n[o].exports;\n  }var i = typeof require == \"function\" && require;for (var o = 0; o < r.length; o++) s(r[o]);return s;\n})({ 1: [function (require, module, exports) {\n    window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame;\n\n    /**\n     * Handles debouncing of events via requestAnimationFrame\n     * @see http://www.html5rocks.com/en/tutorials/speed/animations/\n     * @param {Function} callback The callback to handle whichever event\n     */\n    function Debouncer(callback) {\n      this.callback = callback;\n      this.ticking = false;\n    }\n    Debouncer.prototype = {\n      constructor: Debouncer,\n\n      /**\n       * dispatches the event to the supplied callback\n       * @private\n       */\n      update: function () {\n        this.callback && this.callback();\n        this.ticking = false;\n      },\n\n      /**\n       * ensures events don't get stacked\n       * @private\n       */\n      requestTick: function () {\n        if (!this.ticking) {\n          requestAnimationFrame(this.rafCallback || (this.rafCallback = this.update.bind(this)));\n          this.ticking = true;\n        }\n      },\n\n      /**\n       * Attach this as the event listeners\n       */\n      handleEvent: function () {\n        this.requestTick();\n      }\n    };\n\n    module.exports = Debouncer;\n  }, {}], 2: [function (require, module, exports) {\n    let debouncer = require(\"./Debouncer\");\n\n    function Scrllr(options) {\n      options.assign(Scrllr.options);\n\n      this.lastKnownScrollY = 0;\n      this.initialised = false;\n      this.onScrollCallback = options.onScrollCallback;\n    }\n\n    Scrllr.prototype = {\n      constructor: Scrllr,\n\n      init: function () {\n        this.debouncer = new debouncer(this.update.bind(this));\n\n        // defer event registration to handle browser\n        // potentially restoring previous scroll position\n        setTimeout(this.attachEvent.bind(this), 100);\n\n        return this;\n      },\n\n      attachEvent: function () {\n        if (!this.initialised) {\n          this.lastKnownScrollY = this.getScrollY();\n          this.initialised = true;\n\n          window.addEventListener('scroll', this.debouncer, false);\n          this.debouncer.handleEvent();\n        }\n      },\n\n      getScrollY: function () {\n        return window.pageYOffset !== undefined ? window.pageYOffset : window.scrollTop !== undefined ? window.scrollTop : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n      },\n\n      update: function () {\n        let currentScrollY = this.getScrollY(),\n            scrollDirection = currentScrollY > this.lastKnownScrollY ? 'down' : 'up';\n\n        this.onScrollCallback(currentScrollY);\n        this.lastKnownScrollY = currentScrollY;\n      },\n\n      destroy: function () {\n        this.initialised = false;\n        window.removeEventListener('scroll', this.debouncer, false);\n      }\n\n    };\n\n    Scrllr.options = {\n      onScrollCallback: function () {}\n    };\n\n    module.exports = Scrllr;\n  }, { \"./Debouncer\": 1 }], 3: [function (require, module, exports) {\n    let Scrllr = require(\"./lib/Scrllr.js\");\n\n    let scrllr = new Scrllr();\n  }, { \"./lib/Scrllr.js\": 2 }] }, {}, [3]);"],"file":"app.js","sourceRoot":"/source/"}